local app_scenemanager = require("ld48.app.scenemanager")
local app_render = require("ld48.app.render")
local lume = require("ld48.app.lume")
local player_state = require("ld48.scenes.common.player_state")
local flow = require("ludobits.m.flow")

local function add_ammo(self)
    local s = player_state
    local ws = s.weapon_state

    if ws.ammo_count < 10 then
        ws.ammo_count = math.min(ws.max_ammo, ws.ammo_count + 1)
    end
end

local CHUNK_UPDATE = 1
local CHUNK_SIZE = 1000
local function chunked(x)
    return math.floor(x / CHUNK_SIZE) * CHUNK_SIZE
end

local function generate_floor(self)
    self.floor_map = self.floor_map or {}
    local RADIUS = chunked(app_render.FAR + CHUNK_SIZE) / CHUNK_SIZE

    local MY_X = chunked(player_state.pos.x)
    local MY_Z = chunked(player_state.pos.z)

    CHUNK_UPDATE = CHUNK_UPDATE + 1

    for ix = -RADIUS, RADIUS do
        for iz = -RADIUS, RADIUS do
            local x = ix * CHUNK_SIZE + MY_X
            local z = iz * CHUNK_SIZE + MY_Z
            local id = x .. "_" .. z

            if self.floor_map[id] then
                self.floor_map[id].used = CHUNK_UPDATE
            else
                local obj_id = factory.create("#floor")
                local pos = vmath.vector3(x, 0, z)
                go.set_position(pos, obj_id)
                self.floor_map[id] = {
                    obj_id = obj_id,
                    pos = pos,
                    used = CHUNK_UPDATE
                }
            end
        end
    end

    local d = {}
    for id, v in pairs(self.floor_map) do
        if v.used ~= CHUNK_UPDATE then
            table.insert(d, id)
            go.delete(v.obj_id)
        end
    end
    for _, id in ipairs(d) do
        self.floor_map[id] = nil
    end
end

function init(self)
    local bg_color = vmath.vector4(lume.color("#EFAC68"))
    msg.post("@render:", "clear_color", {color = bg_color})

    flow.start(function()
        app_render.reset()
        player_state.reset()

        app_render.fog_color = bg_color
        app_render.fog_color.w = 0.0 -- zero value enables it

        generate_floor(self)
        go.animate("/power_plant_cog", "euler.z", go.PLAYBACK_LOOP_FORWARD, -3600, go.EASING_LINEAR, 100)

        local _, _, sender = flow.until_message("fade_out_complete")
        msg.post(sender, "fade_out_complete_ok")

        msg.post(".", hash("acquire_input_focus"))

        timer.delay(1, true, add_ammo)
    end, nil, error)
end

function final(self)
    flow.stop()
end

-- local SHOOT_RAYCAST_GROUPS = { hash("harvester") } --, hash("bullet") }
-- local SHOOT_CLOSEST = { all = false }

function update(self, dt)
    local s = player_state
    local ws = s.weapon_state

    generate_floor(self)

    s.update_aim(dt)

    -- Holo stuff
    label.set_text("/weapon_ui#label", string.format("%02d", ws.ammo_count))

    go.set("/weapon_ui#holo", "tint.w", app_render.holo_tint and 0.5 or 0.75)
    go.set("/weapon_ui#label", "color.w", app_render.holo_tint and 0.5 or 0.75)

    -- local s = player_state
    -- local ws = s.weapon_state
    -- -- print(s.pos + s.eye_pos, s.pos + s.eye_pos + app_render.view_front * app_render.FAR)
    -- local results = physics.raycast(s.pos + s.eye_pos, s.pos + s.eye_pos + app_render.view_front * app_render.FAR, SHOOT_RAYCAST_GROUPS, SHOOT_CLOSEST)
    -- if results ~= nil then
    --     for _,result in ipairs(results) do
    --         -- print("CASTED")
    --         go.set_position(result.position + result.normal * 0.05, "/raycast_tester")
    --     end
    -- end
end

function on_message(self, message_id, message, sender)
    flow.on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
    if action_id == hash("touch") and action.pressed then
        local s = player_state
        local ws = s.weapon_state

        if ws.ammo_count <= 0 then
            go.set("/weapon_ui#holo", "tint", vmath.vector4(0.9, 0, 0, 1))
            go.animate("/weapon_ui#holo", "tint", go.PLAYBACK_ONCE_FORWARD, vmath.vector4(1, 1, 1, 0.75), go.EASING_LINEAR, 0.2)
            return
        end

        ws.ammo_count = ws.ammo_count - 1
        if ws.ammo_count < 0 then
            ws.ammo_count = 0
        end

        local s = player_state
        local ws = s.weapon_state
        local results = physics.raycast(s.pos + s.eye_pos, s.pos + s.eye_pos + app_render.view_front * app_render.FAR, 
            { hash("harvester"), hash("target_blue"), hash("plant") }, { all = false })
        if results ~= nil then
            for _,result in ipairs(results) do
                go.set_position(result.position + result.normal * 0.05, "/raycast_tester")
            end
        end

        msg.post("/player_weapon#weapon_anim", "shoot")

        ws.aim_penalty = ws.aim_penalty + 70
    end
end

function on_reload(self)
end
