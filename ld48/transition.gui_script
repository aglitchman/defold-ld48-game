local app_scenemanager = require("ld48.app.scenemanager")
local tween = require("ld48.app.tween")

local SCALE_MIN = 0.00001
local SCALE_MAX = 1

function init(self)
    gui.set_render_order(15)

    self.tiles = {}

    local wh = 126
    local t_count = math.floor(2000 / wh)

    self.root_tile = gui.get_node(hash("tile"))
    for y = -1, t_count + 1 do
        for x = -1, t_count + 1 do
            local node = gui.clone(self.root_tile)
            gui.set_position(node, vmath.vector3(x * wh, y * wh, 0))
            table.insert(self.tiles, node)
        end
    end
    gui.set_size_mode(self.root_tile, gui.SIZE_MODE_MANUAL)
    gui.set_size(self.root_tile, vmath.vector3(0.00001))

    -- print("DEBUG: Transition tiles count", #self.tiles)

    self.cur_scale = 0

    self.state = hash("fade_in")
    self.reply_to = nil
    self.anim_value = SCALE_MAX

    -- self.loading_accum = math.pi
    self.loading_node = gui.get_node(hash("loading"))
end

local function pad_space(s, pad)
    while string.len(s) < pad do
        s = " " .. s
    end
    return s
end

function update(self, dt)
    if self.anim_tween then
        self.anim_tween:update(math.min(dt, 0.033))
    end

    if self.cur_scale ~= self.anim_value then
        local len = #self.tiles
        local scale = vmath.vector3(self.anim_value)
        -- local color = vmath.vector4(1, 1, 1, self.anim_value)
        local enabled = true
        if self.anim_value <= SCALE_MIN then
            enabled = false
        end
        for i = 1, len do
            gui.set_scale(self.tiles[i], scale)
            -- gui.set_color(self.tiles[i], color)
            gui.set_enabled(self.tiles[i], enabled)
        end
        self.cur_scale = self.anim_value

        self.loading_enabled = self.anim_value == SCALE_MAX
        gui.set_enabled(self.loading_node, self.loading_enabled)
    end

    -- if self.loading_enabled then
    --     self.loading_accum = self.loading_accum + 0.1
    --     gui.set_position(self.loading_node, vmath.vector3(1000 + math.sin(self.loading_accum) * 60, 200, 0))
    -- end
end

function on_message(self, message_id, message, sender)
    if message_id == hash("fade_in") then
        assert(self.reply_to == nil)
        self.reply_to = sender
        if self.state == message_id then
            self.anim_tween = nil
            self.anim_value = SCALE_MAX

            on_fade_in_complete(self, nil, nil)
        else
            self.state = message_id

            self.anim_tween = tween.new(0.4, self, {anim_value = SCALE_MAX}, "outQuad", 0, function()
                on_fade_in_complete(self)
            end)
        end
    elseif message_id == hash("fade_out") then
        assert(self.reply_to == nil)
        self.reply_to = sender
        if self.state == message_id then
            self.anim_tween = nil
            self.anim_value = SCALE_MIN

            on_fade_out_complete(self, nil, nil)
        else
            self.state = message_id

            local pause = 0.01
            self.anim_tween = tween.new(0.5, self, {anim_value = SCALE_MIN}, "outQuad", pause, function()
                on_fade_out_complete(self)
            end)
        end
    end
end

function on_fade_in_complete(self, url, property)
    self.loading_accum = math.pi

    msg.post(self.reply_to, hash("transition_fade_in_complete"))
    self.reply_to = nil
end

function on_fade_out_complete(self, url, property)
    msg.post(self.reply_to, hash("transition_fade_out_complete"))
    self.reply_to = nil
end
