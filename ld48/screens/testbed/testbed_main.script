local app_scenemanager = require("ld48.app.scenemanager")
local player_state = require("ld48.screens.common.state")

function init(self)
    msg.post(".", hash("acquire_input_focus"))

    player_state.reset()

    -- go.animate("/test_box", "euler.z", go.PLAYBACK_LOOP_PINGPONG, 3600, go.EASING_LINEAR, 100)
    -- go.animate("/test_box", "euler.x", go.PLAYBACK_LOOP_PINGPONG, 3600, go.EASING_LINEAR, 100)

    -- go.animate("/player_weapon", "euler.x", go.PLAYBACK_LOOP_PINGPONG, 3600, go.EASING_LINEAR, 100)
    go.animate("/objs/test_cube", "euler.y", go.PLAYBACK_LOOP_PINGPONG, 3600, go.EASING_LINEAR, 100)
    -- go.animate("/objs/test_cube", "euler.z", go.PLAYBACK_LOOP_PINGPONG, 3600, go.EASING_LINEAR, 100)
    -- go.animate("/objs/test_cube", "euler.x", go.PLAYBACK_LOOP_PINGPONG, 3600, go.EASING_LINEAR, 100)

    -- msg.post("/objs/test_sprite", "disable")
    -- msg.post("/objs/test_sprite1", "disable")

    self.count = 89
    timer.delay(0.1, true, function (self)
        self.count = self.count - 1
        if self.count < 0 then
            self.count = 99
        end
    end)
end

function final(self)
end

function update(self, dt)
    label.set_text("/count#label", tostring(self.count))
end

function on_message(self, message_id, message, sender)
end

function on_input(self, action_id, action)
    if action_id == hash("key_1") and action.pressed then
        app_scenemanager.load_scene("testbed")
    end
end

function on_reload(self)
end
